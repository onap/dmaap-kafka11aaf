<!-- ============LICENSE_START=======================================================
	org.onap.dmaap ================================================================================
	Copyright Â© 2017 AT&T Intellectual Property. All rights reserved. ================================================================================
	Licensed under the Apache License, Version 2.0 (the "License"); you may not
	use this file except in compliance with the License. You may obtain a copy
	of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required
	by applicable law or agreed to in writing, software distributed under the
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
	OF ANY KIND, either express or implied. See the License for the specific
	language governing permissions and limitations under the License. ============LICENSE_END=========================================================
	ECOMP is a trademark and service mark of AT&T Intellectual Property. -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.onap.oparent</groupId>
    <artifactId>oparent</artifactId>
    <version>3.2.0</version>
  </parent>

  <groupId>org.onap.dmaap.kafka</groupId>
  <artifactId>kafka11aaf</artifactId>
  <version>1.1.0-SNAPSHOT</version>
  <name>dmaap-kafka</name>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <timestamp>${maven.build.timestamp}</timestamp>
    <maven.build.timestamp.format>yyyyMMdd'T'HHmmss'Z'</maven.build.timestamp.format>
    <sitePath>
      /content/sites/site/org/onap/dmaap/kafka0111/${project.artifactId}/${project.version}
    </sitePath>
    <skip.docker.build>true</skip.docker.build>
    <skip.docker.push>true</skip.docker.push>
    <nexusproxy>https://nexus.onap.org</nexusproxy>
    <docker.push.registry>nexus3.onap.org:10003</docker.push.registry>
    <onap.nexus.url>https://nexus.onap.org</onap.nexus.url>
    <sonar.language>java</sonar.language>
    <sonar.skip>false</sonar.skip>
    <sonar.surefire.reportsPath>${project.build.directory}/surefire-reports
    </sonar.surefire.reportsPath>
    <sonar.coverage.jacoco.xmlReportPaths>
      ${project.reporting.outputDirectory}/jacoco-ut/jacoco.xml
    </sonar.coverage.jacoco.xmlReportPaths>
    <sonar.projectVersion>${project.version}</sonar.projectVersion>
    <sonar.exclusions>**/gen/**,**/generated-sources/**,**/yang-gen**,**/pax/**
    </sonar.exclusions>
    <powermock.version>1.6.4</powermock.version>
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
  </properties>

  <distributionManagement>
    <site>
      <id>ecomp-site</id>
      <url>dav:${nexusproxy}${sitePath}</url>
    </site>
  </distributionManagement>

  <build>
    <!-- Copy files to docker-stage to be included in image -->
    <resources>
      <resource>
        <targetPath>${basedir}/target/docker-stage</targetPath>
        <directory>${basedir}/src/main/docker</directory>
      </resource>
      <resource>
        <directory>${basedir}/src/main/resources</directory>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>${maven.compiler.source}</source>
          <target>${maven.compiler.target}</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <excludes>
          </excludes>
          <argLine>
          </argLine>
          <skipTests>false</skipTests>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <argLine>
            --illegal-access=permit
          </argLine>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy</id>
            <phase>package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <outputDirectory>target</outputDirectory>
              <artifactItems>
                <artifactItem>
                  <groupId>org.onap.dmaap.messagerouter.mirroragent</groupId>
                  <artifactId>dmaapMMAgent</artifactId>
                  <version>1.1.2</version>
                  <destFileName>dmaapMMAgent.jar</destFileName>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.7</version>
        <executions>
          <execution>
            <id>copy-jar</id>
            <phase>install</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}/target/docker-stage</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/target</directory>
                  <includes>
                    <include>dmaapMMAgent.jar</include>
                    <include>kafka11aaf.jar</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.2.4</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <finalName>${project.artifactId}</finalName>
              <artifactSet>
                <excludes>
                </excludes>
              </artifactSet>
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <executions>
          <execution>
            <id>onap-java-style</id>
            <configuration>
              <consoleOutput>false</consoleOutput>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>3.0.0-M1</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>org.onap.aaf.authz</groupId>
      <artifactId>aaf-cadi-aaf</artifactId>
      <version>2.7.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.kafka</groupId>
      <artifactId>kafka_2.13</artifactId>
      <version>2.8.0</version>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-api-mockito</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-module-junit4</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-module-junit4-rule</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>1.10.19</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>docker</id>
      <properties>
        <skip.docker.build>false</skip.docker.build>
        <skip.docker.tag>false</skip.docker.tag>
        <skip.docker.push>false</skip.docker.push>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.groovy.maven</groupId>
            <artifactId>gmaven-plugin</artifactId>
            <version>1.0</version>
            <executions>
              <execution>
                <phase>validate</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <properties>
                    <ver>${project.version}</ver>
                    <timestamp>${maven.build.timestamp}</timestamp>
                  </properties>
                  <source>
                    println project.properties['ver'];
                    if (project.properties['ver'].endsWith("-SNAPSHOT")) {
                      project.properties['dockertag1'] = project.properties['ver'] +
                        "-latest";
                      project.properties['dockertag2'] = project.properties['ver'] +
                        "-" + project.properties['timestamp'];
                    } else {
                      project.properties['dockertag1'] = project.properties['ver'] +
                        "-STAGING-latest";
                      project.properties['dockertag2'] = project.properties['ver'] +
                        "-STAGING-" + project.properties['timestamp'];
                    }
                    println 'docker tag 1: ' + project.properties['dockertag1'];
                    println 'docker tag 2: ' + project.properties['dockertag2'];
                  </source>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>0.28.0</version>
            <configuration>
              <pullRegistry>${docker.pull.registry}</pullRegistry>
              <pushRegistry>${docker.push.registry}</pushRegistry>
              <images>
                <image>
                  <name>onap/dmaap/kafka111</name>
                  <build>
                    <cleanup>try</cleanup>
                    <dockerFileDir>${basedir}/target/docker-stage</dockerFileDir>
                    <dockerFile>Dockerfile</dockerFile>
                    <tags>
                      <tag>${dockertag1}</tag>
                      <tag>${dockertag2}</tag>
                    </tags>
                  </build>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>generate-images</id>
                <phase>install</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
              <execution>
                <id>push-images</id>
                <phase>deploy</phase>
                <goals>
                  <goal>push</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
